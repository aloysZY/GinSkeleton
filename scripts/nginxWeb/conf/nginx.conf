user  nginx;
worker_processes  auto;

pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

#以下代码段需要放置在http段
http {
    include       mime.types;
    default_type  application/octet-stream;

    #默认的日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log  logs/access.log  main;

    # 将日志格式修改为 json 格式，方便对接到 elk ，修改日志格式对 nginxWeb 没有任何影响,只会使日志阅读更加人性化
    log_format json '{"created_at":$time_iso8601,'
                           '"url":$uri,'
                           '"args":$args,'
                           '"remote_addr":$remote_addr,'
                           '"method":$request_method,'
                           '"request":$request,'
                           '"status":$status,'
                           '"size":$body_bytes_sent,'
                           '"referer":$http_referer,'
                           '"http_host":$http_host,'
                           '"response_time":$request_time,'
                           '"http_x_forwarded_for":$http_x_forwarded_for,'
                           '"user_agent":$http_user_agent'
                           '}';

    # 设置日志存储路径，一个项目一个文件
#     access_log /var/log/nginxWeb/nginx_access.log json;
    access_log /home/wwwlogs/backend_nginx_access.log json;
    error_log /home/wwwlogs/backend_nginx_error.log;

    #注意，upstream 部分放置在 server 块之外,至少需要一个服务器ip。
    upstream  skeleton_list {
        # 设置负载均衡模式为ip算法模式，这样不同的客户端每次请求都会与第一次建立对话的后端服务器进行交互
        ip_hash;
        server  172.20.10.2:20201;
    }

    server {
    #监听端口
        listen 80;
        #站点域名，没有的话，写项目名称即可
        server_name   ginweb ;
        # 使用 nginxWeb 直接接管静态资源目录
        # 由于项目把路由(public)地址绑定到了同名称的目录 public ，所以我们就用 nginxWeb 接管这个资源路由
        location ~ /public/(.*)  {
            # 使用我们已经定义好的 root 目录，然后截取用户请求时，public 后面的所有地址，直接响应资源，不存在就返回404
            root            /public ;
            index           index.htm  index.html ;
            charset         utf-8 ;
            try_files  /$1   =404;
         }

        location ~ / {
            # 静态资源、目录交给ngixn本身处理，动态路由请求执行后续的代理代码
            try_files $uri $uri/  @GinWeb;
        }
        location @GinWeb {

            #将客户端的ip和头域信息一并转发到后端服务器
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 转发Cookie，设置 SameSite
            proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";

            # 最后，执行代理访问真实服务器
            proxy_pass http://skeleton_list;

        }
         # 以下是静态资源缓存配置
         location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
         {
             expires      30d;
         }

         location ~ .*\.(js|css)?$
         {
             expires      12h;
         }

         location ~ /\.
         {
             deny all;
         }
    }
}

